#+TITLE:     B-Translator API Reference
#+AUTHOR:    Dashamir Hoxha
#+EMAIL:     dashohoxha@gmail.com
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:nil LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:overview toc:t ltoc:t mouse:#aadddd buttons:0 path:org-info.js
#+STYLE: <link rel="stylesheet" type="text/css" href="org-info.css" />

* report

** statistics

   General statistics (number of votes and translations) for the last
   week, month and year.

   + GET public/btr/report/statistics ::
     - lng :: language of translations

   + POST public/btr/report/statistics ::
     - lng: :: language of translations

   Example: [[https://dev.btranslator.org/api-examples/php/report/statistics.php]]

** topcontrib

   Statistics about top contributors.

   + GET public/btr/report/topcontrib ::
     - lng :: language of translations
     - period :: period of report (last =day | week | month | year=)
     - size :: number of results (top contributers), between 5 and 20

   + POST public/btr/report/topcontrib ::
     - lng :: language of translations
     - period :: period of report (last =day | week | month | year=)
     - size :: number of results (top contributers), between 5 and 20

   Example: [[https://dev.btranslator.org/api-examples/php/report/topcontrib.php]]

* translations

** get_random_sguid

   Get the sguid of a random string according to the target.

   + POST public/btr/translations/get_random_sguid ::
     - target :: Can be one of: =next | translated | untranslated=
     - lng :: Code of the language (required for translated and untranslated)
     - last_sguid :: (optional) Restricts the pool of selection to the
                     project(s) of the last reviewed sguid.
     - scope :: (optional) Restricts the pool of selection to the
         given list of project. It is a space separated list of
         origin/project like this: =origin1/project1 origin2
         origin1/project2=

   Example: [[https://dev.btranslator.org/api-examples/php/translations/sguid.php]]


** get

   Get a string, along with its translations, votes and other details.

   + GET public/btr/translations/$sguid ::
     - sguid :: The string (globally unique) id, calculated as:
                =$sguid = sha1($string . $context)= It can also be:
                =next | translated | untranslated=.
     - lng :: The language of translations, like fr, de, etc.

   + POST public/btr/translations/get ::
     - sguid :: The string (globally unique) id, calculated as:
                =$sguid = sha1($string . $context)= It can also be:
                =next | translated | untranslated=.
     - lng :: The language of translations, like fr, de, etc.

     Example: [[https://dev.btranslator.org/api-examples/php/translations/get.php]]

   + GET translations/$lng/$sguid :: Returns the details of a string
     and its translations.  If the request header =Accept:
     application/json= is set, then the output will be in JSON
     (otherwise it will be an HTML page). The parameter /$sguid/ can
     also be one of =next | translated | untranslated=.

     Example:
     #+BEGIN_EXAMPLE
     curl -k -H 'Accept: application/json' \
       'https://dev.btranslator.org/translations/sq/ee178b82f7ff3b5fb48537b834db673b42d48556'
     curl -k -H 'Accept: application/json' https://dev.btranslator.org/translations/sq/next
     #+END_EXAMPLE


** add

   Add a new translation to a source string.

   + POST btr/translations/add ::
     - sguid ::
         The string ID for which a new translation should be added.
     - lng ::
         The language (code) of the new translation.
     - translation ::
         The new translation as a string. If the string has plural
         version(s) as well, they are concatenated with NULL bytes ("\0")
         between them.

     Example: [[https://dev.btranslator.org/api-examples/php/translations/add.php]]


** vote

   Add a vote for the given translation.

   + POST btr/translations/vote ::
     - tguid :: ID of the translation

   Example: [[https://dev.btranslator.org/api-examples/php/translations/vote.php]]


** del

   Delete a translation

   + POST btr/translations/del ::
     - tguid :: ID of the translation

   Example: [[https://dev.btranslator.org/api-examples/php/translations/add.php]]


** del_vote

   Delete a vote from the given translation.

   + POST btr/translations/del_vote ::
     - tguid :: ID of the translation

   Example: [[https://dev.btranslator.org/api-examples/php/translations/vote.php]]


** search

   Search strings and translations using various filters.

   + GET public/btr/translations :: This provides the same
     functionality and has the same parameters as the *search*
     operation.  The only difference is that the parameters are
     provided as a GET request (in the URL), whereas the parameters of
     'search' are provided as a POST request. Sometimes this may be
     more convenient.

   + POST public/btr/translations/search ::
     - lng ::
         The language of translations.
     - limit ::
         The number of results to be returned (min: 5, max: 50).
     - words ::
         Words to be searched for.
     - sguid ::
         If the /words/ is empty and there is a /sguid/ then the
         words of this string are used for searching.
     - mode ::
         Search mode. Can be one of:
         - natural-strings :       Natural search on strings (default).
         - natural-translations :  Natural search on translations.
         - boolean-strings :       Boolean search on strings.
         - boolean-translations :  Boolean search on translations.
     - page ::
         Page of results to be displayed.
     - project ::
         Limit search only to this project
     - origin ::
         Limit search only to the projects of this origin.
     - only_mine :: (boolean)
         Limit search only to the strings touched (translated or voted)
         by the current user.
     - translated_by ::
         Limit search by the author of translations
         (can be used only by admins).
     - voted_by ::
         Limit search by a voter (can be used only by admins).
     - date_filter ::
         Which date to filter (used only by admins). Can be one of:
         - strings :       Filter Strings By Date
         - translations :  Filter Translations By Date (default)
         - votes :         Filter Votes By Date
     - from_date ::
         Date and time.
     - to_date ::
         Date and time.

     Example: [[https://dev.btranslator.org/api-examples/php/translations/search.php]]

  + GET translations/search :: Search strings and translations using
    various filters.  If the request header =Accept: application/json=
    is set, then the output will be in JSON (otherwise it will be an
    HTML page). It gets the same parameters as =GET
    public/btr/translations=

    Example:
    #+BEGIN_EXAMPLE
    curl -k -H 'Accept: application/json' \
         'https://dev.btranslator.org/translations/search?lng=sq&words=space'
    curl -k -H 'Accept: application/json' \
         'https://l10n.org.al/translations/search?lng=sq&words=space'
    #+END_EXAMPLE


** submit

   Submit multiple actions at once.

   + POST btr/translations/submit ::
         Array of actions. Each action is an associated array
         that contains the items:
         - action ::
             The action to be done: =add | vote | del | del_vote=
         - params ::
             Associative array of the needed parameters for this action.

   Example: [[https://dev.btranslator.org/api-examples/php/translations/submit.php]]


** import

   Import translations from PO files.

   + POST btr/translations/import ::
     - lng ::
         Language of translations.
     - file ::
         A PO file with translations, or an archive of PO files
         (accepted extensions: .tar, .gz, .tgz, .bz2, .xz, .7z, .zip).

     Returns associative array containing:
     - messages ::
         Array of notification messages; each notification message
         is an array of a message and a type, where type can be one of
         'status', 'warning', 'error'.

   Example: [[https://dev.btranslator.org/api-examples/php/translations/import.php]]

   This is like a bulk translation and voting service. For any
   translation in the PO files, it will be added as a suggestion if
   such a translation does not exist, or it will just be voted if such
   a translation already exists. In case that the translation already
   exists but its author is not known, then you (the user who makes
   the import) will be recorded as the author of the translation.

   This can be useful for translators if they prefer to work off-line
   with PO files. They can export the PO files of a project, work on
   them with desktop tools (like Lokalize) to translate or correct
   exported translations, and then import back to B-Translator the
   translated/corrected PO files.


* project

** list

   Get a list of existing projects, filtered by origin/project.

   + POST public/btr/project/list ::
     - origin :: Filter by origin.
     - project :: Filter by project.

     Parameters *origin* and *project* can contain =*=, which is
     replaced by =%= (for LIKE matches).

     If *project* is =-= then only a list of 'origin' is outputed,
     otherwise a list of 'origin/project'.

     Example: [[https://dev.btranslator.org/api-examples/php/project/list.php]]

     Examples:
     #+BEGIN_EXAMPLE
     curl -k -X POST https://dev.btranslator.org/public/btr/project/list
     curl -k -X POST https://dev.btranslator.org/public/btr/project/list \
          -H "Content-type: application/json" \
          -d '{"origin": "t*"}'
     #+END_EXAMPLE

   + GET translations/project/list/$origin/$project[/$format] ::
     Return a plain-text list of all the imported projects, filtered
     by the given origin/project. Parameters *origin* and *project*
     can contain =*=, which is replaced by =%= (for LIKE matches).  If
     *project* is =-= then only a list of 'origin' is outputed,
     otherwise a list of 'origin/project'.  The third variable can be
     JSON or TEXT (default).

     Example:
     #+BEGIN_EXAMPLE
     curl 'https://btranslator.org/translations/project/list/*/-'
     curl 'https://btranslator.org/translations/project/list/*/-/json'
     curl 'https://btranslator.org/translations/project/list/LibreOffice/s*'
     curl 'https://btranslator.org/translations/project/list/LibreOffice'
     curl 'https://btranslator.org/translations/project/list/*/nautil*'
     curl 'https://btranslator.org/translations/project/list/*/*/json'
     curl 'https://btranslator.org/translations/project/list'
     #+END_EXAMPLE


** export

   + POST btr/project/export :: Schedule a project for export. When
     the request is completed, the user will be notified by
     email. Accepts these parameters:

     - origin ::
         The origin of the project.
     - project ::
         The name of the project.
     - lng ::
         Translation to be exported.
     - export_mode ::
         The export mode that should be used. It can be one of:
         =original | most_voted | preferred=.
         - The mode =original= exports the translations of the
           original files that were imported.
         - The mode =most_voted= exports the translations with the
           highest number of votes.
         - The mode =preferred= gives precedence to the translations
           voted by a user or a list of users, despite the number of
           votes.
     - preferred_voters ::
         Comma separated list of usernames. Used only when /export_mode/
         is =preferred=.

     Example: [[https://dev.btranslator.org/api-examples/php/project/export.php]]


   + GET/POST translations/project/export :: Return an archive of PO
     files for a given origin/project/lng. Does not allow concurrent
     exports because they may affect the performance of the server.
     Parameters are received from the request (either GET or
     POST). They are:
     - origin ::
         Origin of the project.
     - project ::
         The name of the project.
     - lng ::
         Translation to be exported.
     - export_mode ::
         Mode of export: =most_voted | preferred | original=

         Default is =most_voted= which exports the most voted
         translations and suggestions.

         The export mode =original= exports the translations of the
         original file that was imported (useful for making diffs).

         The export mode =preferred= gives priority to translations
         that are voted by a certain user or a group of users. It
         requires an additional argument (preferred_voters) to specify
         the user (or a list of users) whose translations are
         preferred.
     - preferred_voters ::
         Comma separated list of usernames of the preferred voters.

     Examples:
     #+BEGIN_EXAMPLE
     curl -k 'https://dev.btranslator.org/translations/project/export?origin=test&project=kturtle&lng=sq' > test1.tgz
     curl -k https://dev.btranslator.org/translations/project/export \
          -d 'origin=test&project=kturtle&lng=sq&export_mode=original' > test1.tgz
     curl -k https://dev.btranslator.org/translations/project/export \
          -d origin=test -d project=kturtle -d lng=sq \
          -d export_mode=preferred \
          -d preferred_voters=user1,user2 > test1.tgz
     #+END_EXAMPLE

** diff

   + GET translations/project/diff/$origin/$project/$lng[/$nr[/$ediff]] ::
     Return as plain-text the diff of the PO file for a given
     origin/project/lng, which contains the latest most-voted
     suggestions since the last snapshot. If the parameter *$nr* is
     missing, it returns a list of the saved diffs instead.

     For more details about diffs see: [[https://github.com/B-Translator/btr_server/blob/master/modules/custom/btrCore/data/README.org#snapshots-and-diffs][README.org#snapshots-and-diffs]]

     Examples:
     #+BEGIN_EXAMPLE
     curl https://btranslator.org/translations/project/diff/LibreOffice/sw/sq
     curl https://btranslator.org/translations/project/diff/LibreOffice/sw/sq/2 > 2.diff
     curl https://btranslator.org/translations/project/diff/LibreOffice/sw/sq/2/ediff > 2.ediff
     curl https://btranslator.org/translations/project/diff/LibreOffice/sw/sq/4 > 4.diff
     curl https://btranslator.org/translations/project/diff/LibreOffice/sw/sq/4/ediff > 4.ediff
     #+END_EXAMPLE


** add_string

   Add a new string to a project (useful for vocabularies).

   + POST btr/project/add_string ::
     - origin ::
         Origin (category) of the project.
     - project ::
         Name of the project.
     - tplname :: (optional)
         Name of the template (POT) file.
     - string ::
         String to be added.
     - context :: (optional)
         The context of the string.
     - notify :: (optional)
         It TRUE, notify translators about the new string.

     Returns associative array containing:
     - sguid ::
         The sguid of the new string, or NULL if such a string
         already exists.

   Example: [[https://dev.btranslator.org/api-examples/php/project/add_string.php]]

   Vocabularies are fake translation projects, in the sense that they
   are not strings extracted from a program. Their strings are added
   manually. They serve as a collection/dictionary of interesting,
   important and frequently used terms and their suggested
   translations. They can be useful for translators on their everyday
   job and also can help to discuss and unify the terminology used
   across different programs.


** del_string

   Delete a string from a project (useful for vocabularies).

   + POST btr/project/del_string ::
     - sguid ::
         ID of the string to be deleted.
     - project ::
         The project from which the string will be deleted.
     - origin :: (optional)
         The origin of the project (default: 'vocabulary').

   Example: [[https://dev.btranslator.org/api-examples/php/project/add_string.php]]


** import

   Create a custom project (or update an existing one) by importing
   PO/POT file(s).

   + POST btr/project/import ::
     - origin ::
         The origin of the project that will be imported.
     - project ::
         The name of the project that will be imported.
     - file ::
         A PO file, or an archive of PO/POT files (accepted
         extensions: .tar, .gz, .tgz, .bz2, .xz, .7z, .zip).

     Returns associative array containing:
     - messages ::
         Array of notification messages; each notification message
         is an array of a message and a type, where type can be one of
         'status', 'warning', 'error'.

   Example: [[https://dev.btranslator.org/api-examples/php/project/import.php]]

   This is useful for creating custom translation projects. The PO/POT
   files that are uploaded will be used for importing strings and
   translations. If there are no POT files, then the PO files will be
   used both for importing strings and for importing translations. If
   there are POT files and PO files, their names have to match (except
   for the extension).

   If you want to create a vocabulary, use =vocabulary= as the origin
   of the project, and add the suffix =_lng= to the project name.  Use
   =msgctxt "project_name"= as the context of each string in the PO/POT
   file.  Also the uploaded PO file must have the same name as the
   project, for example =ICT_sq.po=. These restrictions are needed
   because vocabularies are pseudo-projects (for example you can add
   strings to them) and certain assumptions are made about them.


* misc

** latest

   + GET latest/$lng[/$origin[/$project]] :: Return a JSON array of
        the latest translations for the given language (origin and
        project are optional). Latest means yesterday.  Results are
        cached, so last minute translations may not appear on the
        list.

     Examples:
     #+BEGIN_EXAMPLE
     curl https://btranslator.org/latest/sq
     curl https://btranslator.org/latest/sq/vocabulary
     curl https://btranslator.org/latest/sq/vocabulary/ICT_sq
     #+END_EXAMPLE


** rss-feed

   + GET btr/rss-feed[/$origin[/$project]] :: Return a RSS feed of the
        latest translations (origin and project are optional). Latest
        means yesterday.  Results are cached, so last minute
        translations may not appear on the list.

     Examples:
     #+BEGIN_EXAMPLE
     curl https://l10n.org.al/btr/rss-feed
     curl https://l10n.org.al/btr/rss-feed/vocabulary
     curl https://l10n.org.al/btr/rss-feed/vocabulary/ICT_sq
     #+END_EXAMPLE


** twitter

   + GET btr/tweet[/$origin[/$project]] :: Return a random string and
        its translations in a suitable form for the twitter (truncated
        to 100 characters).

     Examples:
     #+BEGIN_EXAMPLE
     curl https://l10n.org.al/btr/tweet
     curl https://l10n.org.al/btr/tweet/vocabulary
     curl https://l10n.org.al/btr/tweet/vocabulary/ICT_sq
     #+END_EXAMPLE

     *Note:* This can be used in combination with /cli twitter
     clients/ and with *cron* to post random tweets about
     translations.  See this script as an example:
     https://github.com/B-Translator/btr_client/blob/master/utils/twitter.sh


   + GET tweet/$lng[/$origin[/$project]] :: Return a random string and
        its translations in a suitable form for the twitter (truncated
        to 100 characters).
     - lng :: Language of translations.

     Examples:
     #+BEGIN_EXAMPLE
     curl https://btranslator.org/tweet/sq
     curl https://btranslator.org/tweet/sq/vocabulary
     curl https://btranslator.org/tweet/sq/vocabulary/ICT_sq
     #+END_EXAMPLE

     *Note:* This can be used in combination with /cli twitter
     clients/ and with *cron* to post random tweets about
     translations.  See this script as an example:
     https://github.com/B-Translator/btr_server/blob/master/utils/twitter.sh


** vocabulary

   + GET translations/vocabulary/export/$vocabulary[/$format] ::
     Return the list of terms in a vocabulary and all the suggested
     translations.
     - $vocabulary ::
         The name of the vocabulary project (which ends in =_lng=).

     - $format ::
         The output format: =json | txt1 | txt2 | org=.
         Default is =json=.

     Examples:
     #+BEGIN_EXAMPLE
     curl https://btranslator.org/translations/vocabulary/export/ICT_sq
     curl https://btranslator.org/translations/vocabulary/export/ICT_sq/txt1
     curl https://btranslator.org/translations/vocabulary/export/ICT_sq/org > ICT_sq.org
     #+END_EXAMPLE


** autocomplete

   + GET auto/project/$str :: Retrieve a JSON list of autocomplete
        suggestions for projects.
     - str :: Beginning of a project name.

     Example:
     #+BEGIN_EXAMPLE
     curl https://btranslator.org/auto/project/kd
     #+END_EXAMPLE

   + GET auto/origin/$str :: Retrieve a JSON list of autocomplete
        suggestions for origins of projects.
     - str :: Beginning of an origin.

     Example:
     #+BEGIN_EXAMPLE
     curl https://btranslator.org/auto/origin/G
     #+END_EXAMPLE

   + GET auto/user/$lng/$str :: Retrieve a JSON list of autocomplete
        suggestions for users.
     - lng :: Language of translations.
     - str :: Beginning of a user name.

     Example:
     #+BEGIN_EXAMPLE
     curl https://btranslator.org/auto/user/sq/d
     #+END_EXAMPLE

   + GET auto/string/$origin/$project/$str ::
     Retrieve a JSON list of autocomplete suggestions for strings.
     - origin :: Limit search to this origin. If it is =*=, then don't
                 limit by origin.
     - project :: Limit search to this project. If it is =*=, then
                  don't limit by project.
     - str :: Beginning of a string.

     Example:
     #+BEGIN_EXAMPLE
     curl https://btranslator.org/auto/string/vocabulary/ICT_sq/a
     curl https://btranslator.org/auto/string/vocabulary/*/a
     curl https://btranslator.org/auto/string/*/ICT_sq/a
     curl https://btranslator.org/auto/string/*/*/a
     #+END_EXAMPLE

** other

   + GET languages :: Return a json list of languages installed on the
                  system and their details.

     Example:
     #+BEGIN_EXAMPLE
     curl https://btranslator.org/languages
     #+END_EXAMPLE


   + GET translations/string_details/$sguid :: Return string context, a
     list of related projects (where the string appears), etc.  This
     callback is invoked from JavaScript and is used as an AJAX
     provider.
     - sguid :: Id of the string.

     Example:
     #+BEGIN_EXAMPLE
     curl https://btranslator.org/translations/string_details/2a430d7b80a053872c2c79a9e3ce2e69dbc37866
     #+END_EXAMPLE

* oauth2

  For more details and examples see: https://github.com/dashohoxha/oauth2-js

  + POST oauth2/token :: Get an OAuth2 token.

    #+BEGIN_EXAMPLE
    $.ajax(base_url + '/oauth2/token', {
        type: 'POST',
        data: {
            grant_type: 'password',
            username: 'user123',
            password: 'pass123',
            scope: 'user_profile', 
        },
        headers: {
            'Authorization': 'Basic ' + btoa(client_id + ':' + client_secret'), 
        },

    });
    #+END_EXAMPLE

  + GET oauth2/tokens/<access_token> :: Verify the validity of an
       OAuth2 token.

    #+BEGIN_EXAMPLE
    $.ajax(base_url + '/oauth2/tokens/' + access_token)
        .fail(function () {
            console.log('Token is not valid.');
        })
        .done(function (response) {
            console.log(response);
        });
    #+END_EXAMPLE

  + POST oauth2/user/profile :: Get the profile of the user.

    #+BEGIN_EXAMPLE
    $.ajax(base_url + '/oauth2/user/profile', {
        type: 'POST',
        headers: {
            'Authorization': 'Bearer ' + access_token,
        },
        dataType: 'json',
    });
    #+END_EXAMPLE

