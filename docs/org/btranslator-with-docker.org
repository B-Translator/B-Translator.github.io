#+TITLE:     Running B-Translator With Docker
#+AUTHOR:    Dashamir Hoxha
#+EMAIL:     dashohoxha@gmail.com
##+DESCRIPTION:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:nil LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
##+INFOJS_OPT: view:overview toc:t ltoc:t mouse:#aadddd buttons:0 path:org-info.js
#+STYLE: <link rel="stylesheet" type="text/css" href="org-info.css" />

Installing a B-Translator Server or Client in a Docker container has
some advantages, compared to installing it in a chroot environment.
For example:
 - More platform independent (can be installed even on
   /Mac-OS-X/ or /Windows/).
 - Better isolation of the guest system from the host system.
 - Can easily run multiple instances of the server or client on the
   same host (useful for development, testing, or resource
   concentration), etc.

However you have to be familiar with the Docker concepts and tools,
and this adds more complexity. For more information about Docker,
installation instructions, tutorials etc. look at
https://docs.docker.com . In this arcticle we will focus only on the
steps relevant to B-Translator.


* Getting images 

  First we have to get the system images.
  #+BEGIN_EXAMPLE
  docker search btranslator
  docker pull btranslator/btr_client:v2.2
  docker pull btranslator/btr_client:v2.2-openatrium
  docker pull btranslator/btr_server:v2.2
  docker images
  #+END_EXAMPLE

  Docker images can be deleted with the command =docker rmi=:
  #+BEGIN_EXAMPLE
  docker rmi btranslator/btr_client:v2.2 btranslator/btr_server:v2.2
  #+END_EXAMPLE


* Creating containers

  Create containers by running docker on an image, with certain
  parameters:
  #+BEGIN_EXAMPLE
  docker run -d --name=bcl --hostname=example.org \
             -p 80:80 -p 443:443 btranslator/btr_client:v2.2
  #+END_EXAMPLE
  If we now check the list of containers with =docker ps -a= we will
  see there the container with name *bcl*. Also, the host ports *80*
  and *443* (HTTP and HTTPS) are mapped to the same ports of the
  container.

  Now that the docker container is running, we can stop and start it
  like this:
  #+BEGIN_EXAMPLE
  docker stop bcl
  docker start bcl
  docker restart bcl
  #+END_EXAMPLE

  If needed, we can create other containers from the same image: 
  #+BEGIN_EXAMPLE
  docker run -d --name=bcl1 -p 81:80 -p 444:443 btranslator/btr_client:v2.2
  docker run -d --name=bcl2 -p 82:80 -p 445:443 btranslator/btr_client:v2.2
  #+END_EXAMPLE

  We can delete containers with =docker rm=, but we have to stop them
  first:
  #+BEGIN_EXAMPLE
  docker stop bcl1 bcl2
  docker rm bcl1 bcl2
  #+END_EXAMPLE


* Accessing the shell

  In order to access the shell of a running Docker container, we have
  to install =docker-enter=:
  #+BEGIN_EXAMPLE
  docker run -v /usr/local/bin:/target jpetazzo/nsenter
  #+END_EXAMPLE

  Then we can access the shell of a container like this:
  #+BEGIN_EXAMPLE
  docker-enter bcl
  #+END_EXAMPLE

  From this shell we can check configuration files, logs, etc.

  See also this article:
  http://blog.docker.com/2014/06/why-you-dont-need-to-run-sshd-in-docker/


* Configuration of B-Translator

  The image that we have used to create and start the container has a
  standard configuration, with default domains, passwords, etc. We need
  to customize these settings.

  #+BEGIN_EXAMPLE
  docker-enter bcl
  cd /usr/local/src/btr_client/
  vim install/settings.sh
  install/{config.sh,settings.sh}
  #+END_EXAMPLE


* Starting a sshd server inside the container

  We want to start a sshd server on port 2201 inside the container,
  but when we created the container with =docker run= we did not think
  about forwarding this port. We have to destroy this container and
  create a new one, with an addition =-p= option for the
  port 2201. But first we should use the command =docker commit= to
  save to a new image any configurations and data that we already have
  in this container.
  #+BEGIN_EXAMPLE
  docker stop bcl
  docker commit bcl btr_client:1
  docker images
  docker rm bcl
  docker run -d --name=bcl --hostname=example.org \
	     -p 80:80 -p 443:443 -p 2201:2201 btr_client:1
  #+END_EXAMPLE

  Now we can enter the container and start the sshd server:
  #+BEGIN_EXAMPLE
  docker-enter bcl
  cd /usr/local/src/btr_client/
  dev/install-sshd.sh 2201
  #+END_EXAMPLE
